/*
 * -------------------------------------------------
 *  nf-core/demultiplex Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  // Container slug. Stable releases should specify release tag!
  //   Developmental code should specify :latest
  container = 'nfcore/demultiplex:latest'

  // Workflow flags
  // TODO nf-core: Specify your pipeline's command line flags
  samplesheet = "samplesheet.csv"
  outdir = '.'

  // Boilerplate options
  name = false
  multiqc_config = "$baseDir/conf/multiqc_config.yaml"
  fastq_screen_conf = "$baseDir/conf/fastq_screen.conf"

  email = false
  plaintext_email = false
  help = false
  igenomes_base = "./iGenomes"
  tenx_genomes_base = "./tenx"
  tracedir = "${params.outdir}/pipeline_info"
  clusterOptions = false
  awsqueue = false
  awsregion = 'eu-west-1'
  igenomesIgnore = false
  custom_config_version = 'master'

  // Options: bcl2fastq
  params.adapter_stringency = 0.9
  params.barcode_mismatches = 0
  params.create_fastq_for_indexreads = false
  params.ignore_missing_bcls = true
  params.ignore_missing_filter = true
  params.ignore_missing_positions = true
  params.minimum_trimmed_readlength = 35
  params.mask_short_adapter_reads = 22
  params.tiles = false
  params.use_bases_mask = false
  params.with_failed_reads = false
  params.write_fastq_reversecomplement = false
  params.no_bgzf_compression = false
  params.fastq_compression_level = 4
  params.no_lane_splitting = false
  params.find_adapters_withsliding_window = false
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
//includeConfig "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}/nfcore_custom.config"

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  crick {
    includeConfig 'conf/crick.config'
    includeConfig 'conf/cellranger.conf'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  test { includeConfig 'conf/test.config' }
}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/demultiplex_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/demultiplex_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/demultiplex_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/demultiplex_dag.svg"
}

manifest {
  name = 'nf-core/demultiplex'
  author = 'Chelsea Sawyer'
  homePage = 'https://github.com/nf-core/demultiplex'
  description = 'Demultiplexing pipeline for Illumina data'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.31.1'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
